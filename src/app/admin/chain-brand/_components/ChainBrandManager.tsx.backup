'use client'

import React from 'react'
import { cn } from '@/lib/utils'
import { Button } from '@/components/ui/button'
import { ConfirmDialog } from '@/components/shared/confirm-dialog'
import { highlightRowFields } from '@/components/shared/field-highlight'
import HotelSearchWidget from '@/components/shared/hotel-search-widget'
import { saveChain, createChain, saveBrand, createBrand, updateChainSortOrder, updateBrandSortOrder } from '@/features/chain-brand/actions'
import { GripVertical } from 'lucide-react'
import {
  DndContext,
  closestCenter,
  KeyboardSensor,
  PointerSensor,
  useSensor,
  useSensors,
  DragEndEvent,
} from '@dnd-kit/core'
import {
  arrayMove,
  SortableContext,
  sortableKeyboardCoordinates,
  useSortable,
  verticalListSortingStrategy,
} from '@dnd-kit/sortable'
import { CSS } from '@dnd-kit/utilities'

export type Chain = { 
  chain_id: number
  name_kr: string | null
  name_en: string | null
  slug: string | null
  chain_sort_order?: number | null
  status?: string | null
}
export type Brand = { 
  brand_id: number
  name_kr: string | null
  name_en: string | null
  chain_id: number | null
  brand_sort_order?: number | null
  status?: string | null
}

interface Props {
  chains: Chain[]
  brands: Brand[]
}

// Sortable Chain Row 컴포넌트
function SortableChainRow({ 
  chain, 
  isActive, 
  formId, 
  preventEnter,
  onSelect,
  onSave,
  startTransition
}: {
  chain: Chain
  isActive: boolean
  formId: string
  preventEnter: (e: React.KeyboardEvent<HTMLInputElement>) => void
  onSelect: () => void
  onSave: () => void
  startTransition: React.TransitionStartFunction
}) {
  const {
    attributes,
    listeners,
    setNodeRef,
    transform,
    transition,
    isDragging,
  } = useSortable({ id: chain.chain_id })

  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
    opacity: isDragging ? 0.5 : 1,
    backgroundColor: isDragging ? '#f0f9ff' : undefined,
  }

  return (
    <tr
      ref={setNodeRef}
      style={style}
      className={cn('border-t hover:bg-gray-50', isActive && 'bg-primary/10')}
    >
      <td className="px-1 py-2 text-center" style={{ width: '30px' }}>
        <div
          {...attributes}
          {...listeners}
          className="cursor-grab active:cursor-grabbing inline-flex items-center justify-center hover:bg-gray-200 rounded p-1"
          onClick={(e) => e.stopPropagation()}
        >
          <GripVertical className="h-4 w-4 text-gray-400" />
        </div>
      </td>
      <td className="px-2 py-2 text-center text-gray-600 text-xs font-medium" style={{ width: '50px' }}>
        {chain.chain_sort_order ?? '-'}
      </td>
      <td className="px-2 py-2" style={{ width: '100px' }}>
        <form id={formId} action="/api/chain-brand/chain/save" method="post" className="hidden">
          <input type="hidden" name="chain_id" value={String(chain.chain_id)} />
        </form>
        <select
          form={formId}
          name="status"
          defaultValue={String(chain.status ?? 'active')}
          onKeyDown={preventEnter}
          className="w-full rounded border px-2 py-1 text-xs"
        >
          <option value="active">활성</option>
          <option value="inactive">비활성</option>
        </select>
      </td>
      <td className="px-3 py-2 cursor-pointer" onClick={onSelect}>
        <input 
          form={formId} 
          name="name_kr" 
          defaultValue={String(chain.name_kr ?? '')} 
          onKeyDown={preventEnter} 
          placeholder="체인(한글)" 
          className="w-full rounded border px-2 py-1 text-xs" 
        />
      </td>
      <td className="px-3 py-2 cursor-pointer" onClick={onSelect}>
        <input 
          form={formId} 
          name="name_en" 
          defaultValue={String(chain.name_en ?? '')} 
          onKeyDown={preventEnter} 
          placeholder="체인(영문)" 
          className="w-full rounded border px-2 py-1 text-xs" 
        />
      </td>
      <td className="px-3 py-2 cursor-pointer" onClick={onSelect}>
        <input 
          form={formId} 
          name="slug" 
          defaultValue={String(chain.slug ?? '')} 
          onKeyDown={preventEnter} 
          placeholder="slug" 
          className="w-full rounded border px-2 py-1 text-xs" 
        />
      </td>
      <td className="px-3 py-2 text-right">
        <div className="flex items-center justify-end gap-1">
          <Button
            type="button"
            size="xs"
            variant="teal"
            onClick={onSave}
          >
            저장
          </Button>
          <form action="/api/chain-brand/chain/delete" method="post" className="inline">
            <input type="hidden" name="chain_id" value={String(chain.chain_id)} />
            <Button type="submit" size="xs" variant="destructive">삭제</Button>
          </form>
        </div>
      </td>
    </tr>
  )
}

// Sortable Brand Row 컴포넌트
function SortableBrandRow({ 
  brand, 
  formId, 
  hasNameEn,
  preventEnter,
  onSave,
  onConnect,
  startTransition
}: {
  brand: Brand
  formId: string
  hasNameEn: boolean
  preventEnter: (e: React.KeyboardEvent<HTMLInputElement>) => void
  onSave: () => void
  onConnect: () => void
  startTransition: React.TransitionStartFunction
}) {
  const {
    attributes,
    listeners,
    setNodeRef,
    transform,
    transition,
    isDragging,
  } = useSortable({ id: brand.brand_id })

  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
    opacity: isDragging ? 0.5 : 1,
    backgroundColor: isDragging ? '#f0f9ff' : undefined,
  }

  return (
    <tr
      ref={setNodeRef}
      style={style}
      data-brand-id={brand.brand_id}
      className="border-t hover:bg-gray-50"
    >
      <td className="px-1 py-2 text-center" style={{ width: '30px' }}>
        <div
          {...attributes}
          {...listeners}
          className="cursor-grab active:cursor-grabbing inline-flex items-center justify-center hover:bg-gray-200 rounded p-1"
          onClick={(e) => e.stopPropagation()}
        >
          <GripVertical className="h-4 w-4 text-gray-400" />
        </div>
      </td>
      <td className="px-2 py-2 text-center text-gray-600 text-xs font-medium" style={{ width: '50px' }}>
        {brand.brand_sort_order ?? '-'}
      </td>
      <td className="px-2 py-2" style={{ width: '100px' }}>
        <form id={formId} action="/api/chain-brand/brand/save" method="post" className="hidden">
          <input type="hidden" name="brand_id" value={String(brand.brand_id)} />
          <input type="hidden" name="chain_id" value={String(brand.chain_id ?? '')} />
        </form>
        <select
          form={formId}
          name="status"
          defaultValue={String(brand.status ?? 'active')}
          onKeyDown={preventEnter}
          className="w-full rounded border px-2 py-1 text-xs"
        >
          <option value="active">활성</option>
          <option value="inactive">비활성</option>
        </select>
      </td>
      <td className="px-1 py-2">
        <div className="flex items-center gap-1">
          <input form={formId} name="name_kr" defaultValue={String(brand.name_kr ?? '')} onKeyDown={preventEnter} placeholder="브랜드(한글)" className="w-24 sm:w-28 md:w-32 lg:w-36 rounded border px-2 py-1 text-xs" />
          {hasNameEn && (
            <input form={formId} name="name_en" defaultValue={String(brand.name_en ?? '')} onKeyDown={preventEnter} placeholder="브랜드(영문)" className="w-24 sm:w-28 md:w-32 lg:w-36 rounded border px-2 py-1 text-xs" />
          )}
        </div>
      </td>
      <td className="px-1 py-2 text-right">
        <div className="flex items-center justify-end gap-0.5">
          <Button
            type="button"
            size="xs"
            className="bg-orange-500 text-white hover:bg-orange-600"
            onClick={onConnect}
          >
            호텔 연결
          </Button>
          <Button
            type="button"
            size="xs"
            variant="teal"
            onClick={onSave}
          >
            저장
          </Button>
          <form action="/api/chain-brand/brand/delete" method="post" className="inline">
            <input type="hidden" name="id" value={String(brand.brand_id)} />
            <Button type="submit" size="xs" variant="destructive">삭제</Button>
          </form>
        </div>
      </td>
    </tr>
  )
}

export function ChainBrandManager({ chains, brands }: Props) {
  const [selectedChainId, setSelectedChainId] = React.useState<number | null>(chains[0]?.chain_id ?? null)
  const [dialogOpen, setDialogOpen] = React.useState(false)
  const [dialogMessage, setDialogMessage] = React.useState('')
  const [onConfirmFn, setOnConfirmFn] = React.useState<(() => void) | null>(null)
  const [addingBrand, setAddingBrand] = React.useState(false)
  const [addingChain, setAddingChain] = React.useState(false)
  const [brandsState, setBrandsState] = React.useState<Brand[]>(brands)
  const [chainsState, setChainsState] = React.useState<Chain[]>(chains)
  const [showHotelConnectModal, setShowHotelConnectModal] = React.useState(false)
  const [selectedBrandForConnect, setSelectedBrandForConnect] = React.useState<Brand | null>(null)
  const [showSchemaInfo, setShowSchemaInfo] = React.useState(false)
  const [isSavingChainOrder, setIsSavingChainOrder] = React.useState(false)
  const [isSavingBrandOrder, setIsSavingBrandOrder] = React.useState(false)
  const createFormId = React.useId()
  const createChainFormId = React.useId()
  
  // Server Actions을 위한 transition
  const [_isPending, startTransition] = React.useTransition()
  
  // 드래그앤 드롭 센서
  const chainSensors = useSensors(
    useSensor(PointerSensor, {
      activationConstraint: {
        distance: 8,
      },
    }),
    useSensor(KeyboardSensor, {
      coordinateGetter: sortableKeyboardCoordinates,
    })
  )
  
  const brandSensors = useSensors(
    useSensor(PointerSensor, {
      activationConstraint: {
        distance: 8,
      },
    }),
    useSensor(KeyboardSensor, {
      coordinateGetter: sortableKeyboardCoordinates,
    })
  )
  
  // 실제 존재하는 컬럼 확인
  const hasNameEn = React.useMemo(() => {
    return brands.length > 0 && brands[0].hasOwnProperty('name_en')
  }, [brands])
  
  const preventEnter = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') {
      e.preventDefault()
      e.stopPropagation()
    }
  }
  
  // 체인 드래그 종료 핸들러
  const handleChainDragEnd = async (event: DragEndEvent) => {
    const { active, over } = event

    if (over && active.id !== over.id) {
      console.log('[ChainBrandManager] Chain drag ended:', { activeId: active.id, overId: over.id })
      
      let updatedChains: Chain[] = []
      
      setChainsState((chains) => {
        const oldIndex = chains.findIndex((item) => item.chain_id === active.id)
        const newIndex = chains.findIndex((item) => item.chain_id === over.id)

        const newChains = arrayMove(chains, oldIndex, newIndex)
        
        // 순서 재정렬 후 chain_sort_order 업데이트
        const reorderedChains = newChains.map((item, index) => ({
          ...item,
          chain_sort_order: index + 1
        }))
        
        updatedChains = reorderedChains
        return reorderedChains
      })
      
      // 순서 자동 저장
      console.log('[ChainBrandManager] Auto-saving chain order...')
      await handleAutoSaveChainOrder(updatedChains)
    }
  }
  
  // 브랜드 드래그 종료 핸들러
  const handleBrandDragEnd = async (event: DragEndEvent) => {
    const { active, over } = event

    if (over && active.id !== over.id) {
      console.log('[ChainBrandManager] Brand drag ended:', { activeId: active.id, overId: over.id })
      
      let updatedBrands: Brand[] = []
      
      setBrandsState((brands) => {
        const oldIndex = brands.findIndex((item) => item.brand_id === active.id)
        const newIndex = brands.findIndex((item) => item.brand_id === over.id)

        const newBrands = arrayMove(brands, oldIndex, newIndex)
        
        // 순서 재정렬 후 brand_sort_order 업데이트
        const reorderedBrands = newBrands.map((item, index) => ({
          ...item,
          brand_sort_order: index + 1
        }))
        
        updatedBrands = reorderedBrands
        return reorderedBrands
      })
      
      // 순서 자동 저장 (현재 선택된 체인의 브랜드만)
      console.log('[ChainBrandManager] Auto-saving brand order...')
      await handleAutoSaveBrandOrder(updatedBrands.filter(b => b.chain_id === selectedChainId))
    }
  }
  
  // 자동 체인 순서 저장
  const handleAutoSaveChainOrder = async (chainsToSave: Chain[]) => {
    setIsSavingChainOrder(true)
    let successCount = 0
    let errorCount = 0

    console.log(`[ChainBrandManager] Saving ${chainsToSave.length} chains...`)

    for (const chain of chainsToSave) {
      if (chain.chain_sort_order != null) {
        const res = await updateChainSortOrder(chain.chain_id, chain.chain_sort_order)
        if (res.success) {
          successCount++
        } else {
          errorCount++
          console.error(`[ChainBrandManager] Failed to save order for chain ${chain.chain_id}:`, res.error)
        }
      }
    }

    setIsSavingChainOrder(false)
    console.log(`✅ 체인 순서 자동 저장 완료: ${successCount}개 성공, ${errorCount}개 실패`)
  }
  
  // 자동 브랜드 순서 저장
  const handleAutoSaveBrandOrder = async (brandsToSave: Brand[]) => {
    setIsSavingBrandOrder(true)
    let successCount = 0
    let errorCount = 0

    console.log(`[ChainBrandManager] Saving ${brandsToSave.length} brands...`)

    for (const brand of brandsToSave) {
      if (brand.brand_sort_order != null) {
        const res = await updateBrandSortOrder(brand.brand_id, brand.brand_sort_order)
        if (res.success) {
          successCount++
        } else {
          errorCount++
          console.error(`[ChainBrandManager] Failed to save order for brand ${brand.brand_id}:`, res.error)
        }
      }
    }

    setIsSavingBrandOrder(false)
    console.log(`✅ 브랜드 순서 자동 저장 완료: ${successCount}개 성공, ${errorCount}개 실패`)
  }

  React.useEffect(() => {
    // 호텔 체인 조회 결과를 브라우저 콘솔에 출력
    console.log('[chain-brand] chains (count=%d)', chains.length, chains)
    console.log('[chain-brand] brands (count=%d)', brands.length, brands)
    
    // 첫 번째 체인과 브랜드의 구조 로깅
    if (chains.length > 0) {
      console.log('[chain-brand] First chain structure:', chains[0])
    }
    if (brands.length > 0) {
      console.log('[chain-brand] First brand structure:', brands[0])
    }
  }, [chains, brands])

  // 왼쪽 호텔 체인 선택이 바뀌면 신규 입력 행은 취소(숨김)
  React.useEffect(() => {
    setAddingBrand(false)
  }, [selectedChainId])

  const filteredBrands = React.useMemo(() => {
    if (selectedChainId == null) return [] as Brand[]
    return brandsState.filter((b) => (b.chain_id ?? null) === selectedChainId)
  }, [brandsState, selectedChainId])

  const selectedChain = React.useMemo(() => {
    return chainsState.find((c) => c.chain_id === selectedChainId)
  }, [chainsState, selectedChainId])

  // 선택된 브랜드의 체인 정보 가져오기
  const selectedBrandChain = React.useMemo(() => {
    if (!selectedBrandForConnect) return null
    return chainsState.find((c) => c.chain_id === selectedBrandForConnect.chain_id)
  }, [chainsState, selectedBrandForConnect])

  const brandHeaderText = React.useMemo(() => {
    if (!selectedChain) return '브랜드'
    const chainName = selectedChain.name_kr || selectedChain.name_en || '이름 없음'
    const brandCount = filteredBrands.length
    return `${chainName} 브랜드 (${brandCount}개)`
  }, [selectedChain, filteredBrands.length])

  // 데이터가 없는 경우 안내 메시지 표시
  if (chains.length === 0 && brands.length === 0) {
    return (
      <div className="space-y-8">
        <div className="p-8 bg-white rounded-lg border border-gray-200 text-center">
          <div className="text-gray-500 mb-4">
            <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
            </svg>
          </div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">데이터가 없습니다</h3>
          <p className="text-sm text-gray-600 mb-4">
            호텔 체인과 브랜드 데이터가 아직 생성되지 않았습니다.
          </p>
          <div className="space-y-2">
            <p className="text-xs text-gray-500">
              • 첫 번째 체인을 추가하려면 &quot;체인 추가&quot; 버튼을 클릭하세요
            </p>
            <p className="text-xs text-gray-500">
              • 체인이 생성된 후 브랜드를 추가할 수 있습니다
            </p>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="space-y-8">
      <div className="grid gap-4 lg:grid-cols-2">
        <ConfirmDialog
          open={dialogOpen}
          message={dialogMessage}
          onClose={() => setDialogOpen(false)}
          onConfirm={() => {
            try { onConfirmFn?.() } finally {
              setOnConfirmFn(null)
              setDialogOpen(false)
            }
          }}
        />
      {/* Left: Chains */}
      <section className="rounded-lg border bg-white p-4 shadow-sm">
        <div className="mb-3 flex items-center justify-between">
          <div>
            <h2 className="text-base font-medium">호텔 체인</h2>
            <p className="text-xs text-muted-foreground">호텔 체인(한글) / 호텔 체인(영문)</p>
          </div>
          <div className="flex items-center gap-2">
            <Button
              type="button"
              size="sm"
              variant="outline"
              onClick={() => setShowSchemaInfo(!showSchemaInfo)}
            >
              스키마 정보
            </Button>
            <Button
              type="button"
              size="sm"
              variant="teal"
              onClick={() => setAddingChain(true)}
              disabled={addingChain}
            >
              체인 추가
            </Button>
          </div>
        </div>

        {/* 스키마 정보 표시 */}
        {showSchemaInfo && (
          <div className="mb-4 p-3 bg-gray-50 border border-gray-200 rounded text-xs">
            <div className="font-medium mb-2">현재 데이터 구조:</div>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <strong>Chains ({chainsState.length}개):</strong>
                {chainsState.length > 0 ? (
                  <div className="mt-1 text-gray-600">
                    {Object.keys(chainsState[0]).map(key => (
                      <div key={key} className="flex justify-between">
                        <span>{key}:</span>
                        <span className="font-mono">{typeof chainsState[0][key as keyof Chain]}</span>
                      </div>
                    ))}
                  </div>
                ) : (
                  <span className="text-gray-500">데이터 없음</span>
                )}
              </div>
              <div>
                <strong>Brands ({brandsState.length}개):</strong>
                {brandsState.length > 0 ? (
                  <div className="mt-1 text-gray-600">
                    {Object.keys(brandsState[0]).map(key => (
                      <div key={key} className="flex justify-between">
                        <span>{key}:</span>
                        <span className="font-mono">{typeof brandsState[0][key as keyof Brand]}</span>
                      </div>
                    ))}
                  </div>
                ) : (
                  <span className="text-gray-500">데이터 없음</span>
                )}
              </div>
            </div>
          </div>
        )}
        <div className="overflow-x-auto">
          <DndContext
            sensors={chainSensors}
            collisionDetection={closestCenter}
            onDragEnd={handleChainDragEnd}
          >
            <table className="min-w-[520px] w-full text-sm">
              <thead>
                <tr className="bg-muted/60">
                  <th className="px-1 py-2 text-center" style={{ width: '30px' }}>
                    <GripVertical className="h-4 w-4 text-gray-400 mx-auto" />
                  </th>
                  <th className="px-2 py-2 text-center" style={{ width: '50px' }}>순서</th>
                  <th className="px-2 py-2 text-center" style={{ width: '100px' }}>상태</th>
                  <th className="px-3 py-2 text-left">호텔 체인(한글)</th>
                  <th className="px-3 py-2 text-left">호텔 체인(영문)</th>
                  <th className="px-3 py-2 text-left">Slug</th>
                  <th className="px-3 py-2 text-right">Actions</th>
                </tr>
              </thead>
              <SortableContext
                items={chainsState.map(c => c.chain_id)}
                strategy={verticalListSortingStrategy}
              >
                <tbody>
              {addingChain && (
                <tr className="border-t bg-teal-50/40">
                  <td className="px-1 py-2 text-center">
                    <GripVertical className="h-4 w-4 text-gray-300 mx-auto" />
                  </td>
                  <td className="px-2 py-2 text-center text-xs text-gray-400">-</td>
                  <td className="px-2 py-2">
                    <form id={createChainFormId} action="/api/chain-brand/chain/create" method="post" className="hidden" onSubmit={(e) => { e.preventDefault(); e.stopPropagation() }}>
                    </form>
                    <select
                      form={createChainFormId}
                      name="status"
                      defaultValue="active"
                      onKeyDown={preventEnter}
                      className="w-full rounded border px-2 py-1 text-xs"
                    >
                      <option value="active">활성</option>
                      <option value="inactive">비활성</option>
                    </select>
                  </td>
                  <td className="px-3 py-2">
                    <input 
                      form={createChainFormId} 
                      name="name_kr" 
                      placeholder="체인(한글)" 
                      onKeyDown={preventEnter} 
                      className="w-full rounded border px-2 py-1 text-xs" 
                    />
                  </td>
                  <td className="px-3 py-2">
                    <input 
                      form={createChainFormId} 
                      name="name_en" 
                      placeholder="체인(영문)" 
                      onKeyDown={preventEnter} 
                      className="w-full rounded border px-2 py-1 text-xs" 
                    />
                  </td>
                  <td className="px-3 py-2">
                    <input 
                      form={createChainFormId} 
                      name="slug" 
                      placeholder="slug" 
                      onKeyDown={preventEnter} 
                      className="w-full rounded border px-2 py-1 text-xs" 
                    />
                  </td>
                  <td className="px-3 py-2 text-right">
                    <div className="flex items-center justify-end gap-1">
                      <Button
                        type="button"
                        size="xs"
                        variant="teal"
                        onClick={async () => {
                          const nameKrInput = document.querySelector(`input[form="${createChainFormId}"][name="name_kr"]`) as HTMLInputElement | null
                          const nameEnInput = document.querySelector(`input[form="${createChainFormId}"][name="name_en"]`) as HTMLInputElement | null
                          const slugInput = document.querySelector(`input[form="${createChainFormId}"][name="slug"]`) as HTMLInputElement | null
                          const statusSelect = document.querySelector(`select[form="${createChainFormId}"][name="status"]`) as HTMLSelectElement | null
                          const nkr = (nameKrInput?.value ?? '').trim()
                          const nen = (nameEnInput?.value ?? '').trim()
                          const slug = (slugInput?.value ?? '').trim()
                          const status = statusSelect?.value ?? 'active'
                          
                          if (!nkr && !nen) {
                            setDialogMessage('체인(한글) 또는 체인(영문) 중 하나는 입력해야 합니다.')
                            setOnConfirmFn(() => () => {})
                            setDialogOpen(true)
                            return
                          }
                          
                          startTransition(async () => {
                            try {
                              const fd = new FormData()
                              fd.append('name_kr', nkr)
                              fd.append('name_en', nen)
                              fd.append('slug', slug)
                              fd.append('status', status)
                              
                              const result = await createChain(fd)
                              
                              if (result.success) {
                                // 즉시 신규 입력 행 숨김
                                setAddingChain(false)
                                // 페이지 새로고침으로 최신 데이터 가져오기
                                window.location.reload()
                              } else {
                                setDialogMessage('저장 중 오류가 발생했습니다.')
                                setOnConfirmFn(() => () => {})
                                setDialogOpen(true)
                                setAddingChain(false)
                              }
                            } catch {
                              setDialogMessage('저장 중 오류가 발생했습니다.')
                              setOnConfirmFn(() => () => {})
                              setDialogOpen(true)
                              setAddingChain(false)
                            }
                          })
                        }}
                      >
                        저장
                      </Button>
                      <Button type="button" size="xs" variant="ghost" onClick={() => setAddingChain(false)}>취소</Button>
                    </div>
                  </td>
                </tr>
              )}
              {chainsState.map((c) => {
                const active = c.chain_id === selectedChainId
                const formId = `chain-form-${c.chain_id}`
                return (
                  <SortableChainRow
                    key={c.chain_id}
                    chain={c}
                    isActive={active}
                    formId={formId}
                    preventEnter={preventEnter}
                    onSelect={() => setSelectedChainId(c.chain_id)}
                    startTransition={startTransition}
                    onSave={async () => {
                      try {
                        const nameKrInput = document.querySelector(`input[form="${formId}"][name="name_kr"]`) as HTMLInputElement | null
                        const nameEnInput = document.querySelector(`input[form="${formId}"][name="name_en"]`) as HTMLInputElement | null
                        const slugInput = document.querySelector(`input[form="${formId}"][name="slug"]`) as HTMLInputElement | null
                        const statusSelect = document.querySelector(`select[form="${formId}"][name="status"]`) as HTMLSelectElement | null
                        const nkr = (nameKrInput?.value ?? '').trim()
                        const nen = (nameEnInput?.value ?? '').trim()
                        const slug = (slugInput?.value ?? '').trim()
                        const status = statusSelect?.value ?? 'active'
                        
                        if (!nkr && !nen) {
                          setDialogMessage('체인(한글) 또는 체인(영문) 중 하나는 입력해야 합니다.')
                          setOnConfirmFn(() => () => {})
                          setDialogOpen(true)
                          return
                        }
                        
                        startTransition(async () => {
                          try {
                            const fd = new FormData()
                            fd.append('chain_id', String(c.chain_id))
                            fd.append('name_kr', nkr)
                            fd.append('name_en', nen)
                            fd.append('slug', slug)
                            fd.append('status', status)
                            
                            const result = await saveChain(fd)
                            
                            if (result.success) {
                              // 로컬 상태 업데이트
                              setChainsState((prev) => prev.map((x) => (x.chain_id === c.chain_id ? { ...x, name_kr: nkr, name_en: nen, slug: slug } : x)))
                              // 공통 하이라이트 적용
                              const row = nameKrInput?.closest('tr') ?? null
                              highlightRowFields(row, 'input[name="name_kr"], input[name="name_en"], input[name="slug"]')
                            } else {
                              const errMsg = result.error || '저장 중 오류가 발생했습니다.'
                              setDialogMessage(errMsg)
                              setOnConfirmFn(() => () => {})
                              setDialogOpen(true)
                            }
                          } catch {
                            setDialogMessage('저장 중 오류가 발생했습니다.')
                            setOnConfirmFn(() => () => {})
                            setDialogOpen(true)
                          }
                        })
                      } catch {
                        setDialogMessage('저장 중 오류가 발생했습니다.')
                        setOnConfirmFn(() => () => {})
                        setDialogOpen(true)
                      }
                    }}
                  />
                )
              })}
              {chainsState.length === 0 && !addingChain && (
                <tr>
                  <td className="px-3 py-4 text-center text-xs text-muted-foreground" colSpan={7}>
                    <div className="space-y-2">
                      <p>체인 데이터가 없습니다.</p>
                      <p className="text-blue-600">&quot;체인 추가&quot; 버튼을 클릭하여 첫 번째 체인을 생성하세요.</p>
                    </div>
                  </td>
                </tr>
              )}
                </tbody>
              </SortableContext>
            </table>
          </DndContext>
        </div>
      </section>

      {/* Right: Brands (filtered) */}
      <section className="rounded-lg border bg-white p-4 shadow-sm">
        <div className="mb-3 flex items-center justify-between">
          <div>
            <h2 className="text-base font-medium">{brandHeaderText}</h2>
          </div>
          <Button
            type="button"
            size="sm"
            variant="violet"
            onClick={() => setAddingBrand(true)}
            disabled={addingBrand || selectedChainId == null}
            title={selectedChainId == null ? '먼저 체인을 선택해주세요' : '새 브랜드 추가'}
          >
            브랜드 추가
          </Button>
        </div>
        <div className="overflow-x-auto">
          <DndContext
            sensors={brandSensors}
            collisionDetection={closestCenter}
            onDragEnd={handleBrandDragEnd}
          >
            <table className="w-full text-sm table-fixed">
              <thead>
                <tr className="bg-muted/60">
                  <th className="px-1 py-2 text-center" style={{ width: '30px' }}>
                    <GripVertical className="h-4 w-4 text-gray-400 mx-auto" />
                  </th>
                  <th className="px-2 py-2 text-center" style={{ width: '50px' }}>순서</th>
                  <th className="px-2 py-2 text-center" style={{ width: '100px' }}>상태</th>
                  <th className="px-1 py-2 text-left">브랜드</th>
                  <th className="px-1 py-2 text-right" style={{ width: '200px' }}>Actions</th>
                </tr>
              </thead>
              <SortableContext
                items={filteredBrands.map(b => b.brand_id)}
                strategy={verticalListSortingStrategy}
              >
                <tbody>
              {selectedChainId == null && (
                <tr>
                  <td className="px-3 py-4 text-center text-xs text-muted-foreground" colSpan={5}>
                    <div className="space-y-2">
                      <p>왼쪽 테이블에서 체인을 선택하세요.</p>
                      <p className="text-blue-600">체인을 선택한 후 브랜드를 추가할 수 있습니다.</p>
                    </div>
                  </td>
                </tr>
              )}
              {selectedChainId != null && filteredBrands.length === 0 && !addingBrand && (
                <tr>
                  <td className="px-3 py-4 text-center text-xs text-muted-foreground" colSpan={5}>
                    <div className="space-y-2">
                      <p>선택한 체인의 브랜드가 없습니다.</p>
                      <p className="text-blue-600">&quot;브랜드 추가&quot; 버튼을 클릭하여 첫 번째 브랜드를 생성하세요.</p>
                    </div>
                  </td>
                </tr>
              )}
              {addingBrand && (
                <tr className="border-t bg-violet-50/40">
                  <td className="px-1 py-2 text-center">
                    <GripVertical className="h-4 w-4 text-gray-300 mx-auto" />
                  </td>
                  <td className="px-2 py-2 text-center text-xs text-gray-400">-</td>
                  <td className="px-2 py-2">
                    <form id={createFormId} action="/api/chain-brand/brand/save" method="post" className="hidden" onSubmit={(e) => { e.preventDefault(); e.stopPropagation() }}>
                      <input type="hidden" name="chain_id" value={String(selectedChainId ?? '')} />
                    </form>
                    <select
                      form={createFormId}
                      name="status"
                      defaultValue="active"
                      onKeyDown={preventEnter}
                      className="w-full rounded border px-2 py-1 text-xs"
                    >
                      <option value="active">활성</option>
                      <option value="inactive">비활성</option>
                    </select>
                  </td>
                  <td className="px-1 py-2">
                    <div className="flex items-center gap-1">
                      <input form={createFormId} name="name_kr" placeholder="브랜드(한글)" onKeyDown={preventEnter} className="w-24 sm:w-28 md:w-32 lg:w-36 rounded border px-2 py-1 text-xs" />
                      {hasNameEn && (
                        <input form={createFormId} name="name_en" placeholder="브랜드(영문)" onKeyDown={preventEnter} className="w-24 sm:w-28 md:w-32 lg:w-36 rounded border px-2 py-1 text-xs" />
                      )}
                    </div>
                    {/* 디버깅 정보 */}
                    <div className="text-xs text-gray-500 mt-1">
                      선택된 체인 ID: {selectedChainId ?? '없음'}
                    </div>
                  </td>
                  <td className="px-3 py-2 text-right">
                    <div className="flex items-center justify-end gap-1">
                      <Button
                        type="button"
                        size="xs"
                        variant="teal"
                        onClick={async () => {
                          if (selectedChainId == null) {
                            setDialogMessage('체인을 먼저 선택하세요.')
                            setOnConfirmFn(() => () => {})
                            setDialogOpen(true)
                            return
                          }
                          
                          // form 속성으로 연결된 input들을 직접 찾기
                          const nameKrInput = document.querySelector(`input[form="${createFormId}"][name="name_kr"]`) as HTMLInputElement | null
                          const nameEnInput = hasNameEn ? document.querySelector(`input[form="${createFormId}"][name="name_en"]`) as HTMLInputElement | null : null
                          const statusSelect = document.querySelector(`select[form="${createFormId}"][name="status"]`) as HTMLSelectElement | null
                          
                          if (!nameKrInput) {
                            setDialogMessage('입력 필드를 찾을 수 없습니다.')
                            setOnConfirmFn(() => () => {})
                            setDialogOpen(true)
                            return
                          }
                          
                          const nkr = (nameKrInput.value ?? '').trim()
                          const nen = hasNameEn ? (nameEnInput?.value ?? '').trim() : ''
                          const status = statusSelect?.value ?? 'active'
                          
                          console.log('[brand][client] new brand values:', { 
                            chain_id: selectedChainId,
                            name_kr: nkr, 
                            name_en: nen,
                            status,
                            hasNameEn
                          })
                          
                          if (!nkr && !nen) {
                            setDialogMessage('브랜드(한글) 또는 브랜드(영문) 중 하나는 입력해야 합니다.')
                            setOnConfirmFn(() => () => {})
                            setDialogOpen(true)
                            return
                          }
                          
                          const fd = new FormData()
                          // 새 브랜드 생성이므로 brand_id는 전송하지 않음
                          fd.append('chain_id', String(selectedChainId))
                          fd.append('name_kr', nkr)
                          if (hasNameEn) {
                            fd.append('name_en', nen)
                          }
                          fd.append('status', status)
                          
                          // FormData 내용 검증
                          const formDataObj = {
                            chain_id: fd.get('chain_id'),
                            name_kr: fd.get('name_kr'),
                            ...(hasNameEn && { name_en: fd.get('name_en') })
                          }
                          
                          console.log('[brand][client] sending FormData:', formDataObj)
                          
                          // 체인 ID 검증
                          if (!formDataObj.chain_id || formDataObj.chain_id === 'null' || formDataObj.chain_id === 'undefined') {
                            setDialogMessage('체인 ID가 올바르지 않습니다. 체인을 다시 선택해주세요.')
                            setOnConfirmFn(() => () => {})
                            setDialogOpen(true)
                            return
                          }
                          
                          startTransition(async () => {
                            try {
                              const result = await createBrand(fd)
                              
                              console.log('[brand][client] response:', result)
                              
                              if (result.success && result.data) {
                                // 즉시 신규 입력 행 숨김 (깜빡임 방지)
                                setAddingBrand(false)
                                
                                // 새 브랜드를 로컬 상태에 추가
                                const newBrand: Brand = {
                                  brand_id: result.data.brand_id!,
                                  chain_id: selectedChainId,
                                  name_kr: nkr,
                                  name_en: hasNameEn ? nen : null
                                }
                                
                                setBrandsState((prev) => [newBrand, ...prev])
                                
                                setDialogMessage('브랜드가 성공적으로 생성되었습니다.')
                                setOnConfirmFn(() => () => {
                                  // 확인 팝업 OK 클릭 시 하이라이트 적용
                                  setTimeout(() => {
                                    const brandId = result.data?.brand_id
                                    if (brandId) {
                                      const newBrandRow = document.querySelector(`tr[data-brand-id="${brandId}"]`)
                                      if (newBrandRow) {
                                        highlightRowFields(newBrandRow, 'input[name="name_kr"], input[name="name_en"]')
                                      }
                                    }
                                  }, 50)
                                })
                                setDialogOpen(true)
                              } else {
                                const errMsg = result.error || '저장 중 오류가 발생했습니다.'
                                setDialogMessage(errMsg)
                                setOnConfirmFn(() => () => {})
                                setDialogOpen(true)
                                // 오류 시에도 신규 입력 행 숨김
                                setAddingBrand(false)
                              }
                            } catch (error) {
                              console.error('[brand][client] error:', error)
                              setDialogMessage(`네트워크 오류가 발생했습니다: ${error instanceof Error ? error.message : '알 수 없는 오류'}`)
                              setOnConfirmFn(() => () => {})
                              setDialogOpen(true)
                              // 오류 시에도 신규 입력 행 숨김
                              setAddingBrand(false)
                            }
                          })
                        }}
                      >
                        저장
                      </Button>
                      <Button type="button" size="xs" variant="ghost" onClick={() => setAddingBrand(false)}>취소</Button>
                    </div>
                  </td>
                </tr>
              )}
              {filteredBrands.map((b) => {
                const formId = `brand-form-${b.brand_id}`
                return (
                  <SortableBrandRow
                    key={b.brand_id}
                    brand={b}
                    formId={formId}
                    hasNameEn={hasNameEn}
                    preventEnter={preventEnter}
                    startTransition={startTransition}
                    onConnect={() => {
                      setSelectedBrandForConnect(b)
                      setShowHotelConnectModal(true)
                    }}
                    onSave={async () => {
                      try {
                        // form 속성으로 연결된 input들을 직접 찾기
                        const nameKrInput = document.querySelector(`input[form="${formId}"][name="name_kr"]`) as HTMLInputElement | null
                        const nameEnInput = document.querySelector(`input[form="${formId}"][name="name_en"]`) as HTMLInputElement | null
                        const statusSelect = document.querySelector(`select[form="${formId}"][name="status"]`) as HTMLSelectElement | null
                        const nkr = (nameKrInput?.value ?? '').trim()
                        const nen = (nameEnInput?.value ?? '').trim()
                        const status = statusSelect?.value ?? 'active'
                        console.log('[brand][client] updating existing:', { brand_id: b.brand_id, chain_id: selectedChainId, name_kr: nkr, name_en: nen, status })
                        
                        if (!nkr && !nen) {
                          setDialogMessage('브랜드(한글) 또는 브랜드(영문) 중 하나는 입력해야 합니다.')
                          setOnConfirmFn(() => () => {})
                          setDialogOpen(true)
                          return
                        }
                        
                        startTransition(async () => {
                          try {
                            const fd = new FormData()
                            fd.append('brand_id', String(b.brand_id))
                            fd.append('chain_id', String(selectedChainId ?? ''))
                            fd.append('name_kr', nkr)
                            fd.append('name_en', nen)
                            fd.append('status', status)
                            
                            const result = await saveBrand(fd)
                            
                            if (result.success && result.data) {
                              // 로컬 상태 업데이트
                              setBrandsState((prev) => prev.map((x) => (x.brand_id === result.data?.brand_id ? (result.data as Brand) : x)))
                              // 공통 하이라이트 적용
                              const row = nameKrInput?.closest('tr') ?? null
                              highlightRowFields(row, 'input[name="name_kr"], input[name="name_en"]')
                            } else {
                              const errMsg = result.error || '저장 중 오류가 발생했습니다.'
                              setDialogMessage(errMsg)
                              setOnConfirmFn(() => () => {})
                              setDialogOpen(true)
                            }
                          } catch {
                            setDialogMessage('저장 중 오류가 발생했습니다.')
                            setOnConfirmFn(() => () => {})
                            setDialogOpen(true)
                          }
                        })
                      } catch {
                        setDialogMessage('저장 중 오류가 발생했습니다.')
                        setOnConfirmFn(() => () => {})
                        setDialogOpen(true)
                      }
                    }}
                  />
                )
              })}
                </tbody>
              </SortableContext>
            </table>
          </DndContext>
        </div>
      </section>
      </div>

      {/* 호텔 연결 모달 */}
      {showHotelConnectModal && selectedBrandForConnect && (
        <div className="fixed inset-0 z-50">
          <div className="absolute inset-0 bg-black/40" onClick={() => {
            setShowHotelConnectModal(false)
            setSelectedBrandForConnect(null)
          }} />
          <div className="absolute left-1/2 top-1/2 w-[min(95vw,1200px)] h-[80vh] -translate-x-1/2 -translate-y-1/2 rounded-lg border bg-white p-6 shadow-xl overflow-hidden flex flex-col">
            {/* 모달 헤더 */}
            <div className="flex items-center justify-between mb-4">
              <div>
                <h2 className="text-lg font-semibold text-gray-900">호텔 연결</h2>
                <div className="mt-1 text-sm text-gray-600">
                  연결 대상 체인 & 브랜드: 
                  <span className="font-medium text-gray-900 ml-1">
                    {selectedBrandChain?.name_kr || '-'}({selectedBrandChain?.name_en || '-'}) / {selectedBrandForConnect.name_kr || '-'}({selectedBrandForConnect.name_en || '-'})
                  </span>
                </div>
              </div>
              <Button 
                type="button" 
                variant="secondary" 
                size="sm" 
                onClick={() => {
                  setShowHotelConnectModal(false)
                  setSelectedBrandForConnect(null)
                }}
              >
                닫기
              </Button>
            </div>
            
            {/* 모달 콘텐츠 */}
            <div className="flex-1 overflow-auto">
              <HotelSearchWidget 
                hideHeader={true}
                enableHotelEdit={true}
                showInitialHotels={true}
                enableChainBrandConnect={true}
                connectChainId={selectedBrandForConnect?.chain_id || null}
                connectBrandId={selectedBrandForConnect?.brand_id || null}
                onConnectSuccess={(sabreId) => {
                  console.log(`호텔 ${sabreId}가 체인 ${selectedBrandForConnect?.chain_id}, 브랜드 ${selectedBrandForConnect?.brand_id}에 연결되었습니다.`)
                  // 연결 성공 시 모달 닫기 (선택사항)
                  // setShowHotelConnectModal(false)
                }}
              />
            </div>
          </div>
        </div>
      )}
    </div>
  )
}


